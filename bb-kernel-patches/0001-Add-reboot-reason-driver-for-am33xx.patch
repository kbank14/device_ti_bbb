From 8e01082f566bc1e00f67fa183ce20d96f5bc83b1 Mon Sep 17 00:00:00 2001
From: Chris Simmonds <chris@2net.co.uk>
Date: Tue, 16 Feb 2016 11:12:41 +0000
Subject: [PATCH] Add reboot reason driver for am33xx that places a flag in the
 last 16 bytes of on-chip static memory. The flag is set on reboot, so that
 "adb reboot bootloader" works when used together with a U-Boot that reads
 that same sram location

---
 drivers/staging/android/Makefile            |  2 +
 drivers/staging/android/bbbandroid-reboot.c | 98 +++++++++++++++++++++++++++++
 2 files changed, 100 insertions(+)
 create mode 100644 drivers/staging/android/bbbandroid-reboot.c

diff --git a/drivers/staging/android/Makefile b/drivers/staging/android/Makefile
index b35a631..99cc3f7 100644
--- a/drivers/staging/android/Makefile
+++ b/drivers/staging/android/Makefile
@@ -1,5 +1,7 @@
 ccflags-y += -I$(src)			# needed for trace events
 
+obj-y += bbbandroid-reboot.o
+
 obj-$(CONFIG_ANDROID_BINDER_IPC)	+= binder.o
 obj-$(CONFIG_ASHMEM)			+= ashmem.o
 obj-$(CONFIG_ANDROID_LOGGER)		+= logger.o
diff --git a/drivers/staging/android/bbbandroid-reboot.c b/drivers/staging/android/bbbandroid-reboot.c
new file mode 100644
index 0000000..6759ec0
--- /dev/null
+++ b/drivers/staging/android/bbbandroid-reboot.c
@@ -0,0 +1,98 @@
+/* 
+ * Copyright (c) 2016 Chris Simmonds, chris@2net.co.uk
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+
+#include <linux/io.h>
+#include <linux/reboot.h>
+#include <plat/sram.h>
+
+MODULE_AUTHOR("Chris Simmonds");
+MODULE_DESCRIPTION("Reboot hook for BBB Android");
+MODULE_LICENSE("GPL");
+
+/* This ony works for the am33xx chip, and enven then has only been tested
+   on the BBB. Probably should emit an error if someone tries to build with
+   any other SoC */
+
+/* Stolen from arch/arm/mach-omap2/sram.h
+   TBD: include correclty */
+#define AM33XX_SRAM_PA		0x40300000
+
+
+#define REBOOT_FLAG_RECOVERY    0x52564352
+#define REBOOT_FLAG_FASTBOOT    0x54534146
+#define REBOOT_FLAG_NORMAL      0x4D524F4E
+#define REBOOT_FLAG_POWER_OFF   0x46464F50
+
+/* Write reboot flag to 16 bytes from the end of SRAM. The flag
+   can be read by a bootloader to determine the boot sequence.
+   For example on an Android device, "adb reboot bootloader" results in a
+   call to this function and the reboot flag becomes REBOOT_FLAG_FASTBOOT
+   which the bootloader should check and so enable fastboot */
+static int beagleboneblack_notifier_call(struct notifier_block *this,
+                                        unsigned long code, void *_cmd)
+{
+        void __iomem *reboot_reason_addr;
+        unsigned int flag = REBOOT_FLAG_NORMAL;
+
+	pr_info("%s %lu\n", __func__, code);
+
+        reboot_reason_addr = ioremap(AM33XX_SRAM_PA + 0xf000, SZ_4K);
+	if (reboot_reason_addr == NULL) {
+		pr_err("beagleboneblack_notifier_call: ioremap 0x%x failed\n", AM33XX_SRAM_PA + 0xf000);
+                return notifier_from_errno(-ENOMEM);
+	}
+
+        if (code == SYS_RESTART) {
+                if (_cmd) {
+		pr_info("%s cmd '%s'\n", __func__, (char *)_cmd);
+                        if (!strcmp(_cmd, "recovery"))
+                                flag = REBOOT_FLAG_RECOVERY;
+                        else if (!strcmp(_cmd, "bootloader"))
+                                flag = REBOOT_FLAG_FASTBOOT;
+                }
+        } else if (code == SYS_POWER_OFF) {
+                flag = REBOOT_FLAG_POWER_OFF;
+        }
+        writel(flag, reboot_reason_addr + 0x0ff0); // PA 4030_fff0
+        return NOTIFY_DONE;
+}
+
+static struct notifier_block beagleboneblack_reboot_notifier = {
+        .notifier_call = beagleboneblack_notifier_call,
+};
+
+static int __init reboot_init(void)
+{
+	int retval;
+
+	retval = register_reboot_notifier(&beagleboneblack_reboot_notifier);
+	pr_info("BBB Android reboot loaded\n");
+	return retval;
+}
+
+static void __exit reboot_exit(void)
+{
+	pr_info("BBB Android reboot unloaded\n");
+}
+
+module_init(reboot_init);
+module_exit(reboot_exit);
-- 
1.9.1

